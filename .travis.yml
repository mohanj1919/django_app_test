language: python
python:
  - "3.5"

services:
  - docker

# Limit builds on topic branches to PR instead of every push
# https://blog.travis-ci.com/2012-08-13-build-workflow-around-pull-requests/
branches:
  only:
    - development
    - deiddev
    - production
    - master

env:
  global:
    #AWS_ACCESS_KEY_ID & AWS_SECRET_ACCESS_KEY are set via the travis console (not clear why, but defining via secure: didn't result in them being available...
    - AWS_DEFAULT_REGION=us-east-1
    - APP=curation
    # Figure out git branch regardless of PR/normal build
    - PR=https://api.github.com/repos/$TRAVIS_REPO_SLUG/pulls/$TRAVIS_PULL_REQUEST
    - BRANCH=$(if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then echo $TRAVIS_BRANCH; else echo `curl -s $PR | jq -r .head.ref`; fi)
    - AWS_ACCOUNT=$(if [ "$BRANCH" == "master" ]; then echo 762653616445; elif [ "$BRANCH" == "deiddev" ]; then echo 762653616445; fi)
    - DEVOPS_ENV=$(if [ "$BRANCH" == "master" ]; then echo master; elif [ "$BRANCH" == "deiddev" ]; then echo deiddev; fi)
    - COMPOSE_IMAGE=curation
    - DOCKER_AWS_ENV="-e AWS_DEFAULT_REGION -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY -e AWS_SESSION_TOKEN -e AWS_SESSION_EXPIRATION"
    - DOCKER_AWS_ENV_DEPLOY_USER="-e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY -e AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN -e AWS_SESSION_EXPIRATION=$AWS_SESSION_EXPIRATION"

    - REPO_PREFIX=boc-${DEVOPS_ENV}-
    - REV_DATE=$(date +%Y%m%d%H%M%S)
    - REV="${REV_DATE}-${TRAVIS_COMMIT::7}"
    - ECR_REGISTRY_HOST=${AWS_ACCOUNT}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
    - ECR_REPO_NAME=${REPO_PREFIX}${APP}
    - ECS_IMAGE=${ECR_REGISTRY_HOST}/${ECR_REPO_NAME}
    - ECS_CLUSTER=${REPO_PREFIX}main
    - ECS_SERVICE=${REPO_PREFIX}${APP}
    - ECS_TASK=${REPO_PREFIX}${APP}
    - CACHE_TAG=cache_$BRANCH
    - DOCKER_COMPOSE_VERSION=1.5.2

before_install:
  # debug env
  - env | sort
  # Using docker pull to get docker image layer cache will only work for docker < v1.10
  # hopefully something else will be available before travis upgrades
  # https://github.com/docker/docker/issues/20316#issuecomment-206640001
  - docker version
  - docker-compose version

  # Set AWS credential env vars to be those of the ops-deployer role for the current account
  - eval $(docker run ${DOCKER_AWS_ENV_DEPLOY_USER} betteroutcomes/aws-ecs-deploy aws-assume-role $AWS_ACCOUNT ops-deployer)

  # docker login into the ECR repo for the current account so that we can pull/push to it
  - eval $(docker run ${DOCKER_AWS_ENV} betteroutcomes/aws-ecs-deploy aws ecr get-login)

  # Pull the most recent image to make the build quicker
  - docker pull $ECS_IMAGE:$CACHE_TAG || docker pull $ECS_IMAGE:latest || true

install:
  - env > .env
  - cat .env_dev >> .env
  - export SERVER_URL=$SERVICE_URL
  # Build the UI app
  - docker-compose -f docker-compose-travis.yml build curation-web

script:
  # Run UI tests
  - |
    set -e
    docker-compose -f docker-compose-travis.yml up curation-web

  # Run tests with docker-compose
  #- docker-compose -f docker-compose-travis.yml up -d postgres
  #- |
  #  # fail fast
  #  set -e
  #  docker-compose -f docker-compose-travis.yml run app

  # Build with docker-compose
  - docker-compose -f docker-compose-travis.yml build app

deploy:
  skip_cleanup: true
  provider: script
  script: echo "Maybe Deploying!"
  on:
    all_branches: true

after_deploy:
  - |
    # fail fast
    set -e
    # Only do push/deploy/clean if on a trigger branch
    if [[ $BRANCH =~ master|deiddev ]]; then
      echo "Performing deploy for branch $BRANCH"
      eval $(docker run ${DOCKER_AWS_ENV_DEPLOY_USER} betteroutcomes/aws-ecs-deploy aws-assume-role $AWS_ACCOUNT ops-deployer)

      # Tag docker-compose built image with ECR repo+tags and push them
      docker tag $COMPOSE_IMAGE $ECS_IMAGE:latest && docker push $ECS_IMAGE:latest
      docker tag $COMPOSE_IMAGE $ECS_IMAGE:${REV} && docker push $ECS_IMAGE:${REV}

      # The ID world and the DEID world handle their use of the schema repository differently.  In the DEID world
      # schema is a task that migrates the stdstore.  In the ID world, schema is a service that provides an API.

      if [[ $BRANCH =~ master|deiddev ]]; then
          # Update the ECS service
          docker run ${DOCKER_AWS_ENV} betteroutcomes/aws-ecs-deploy aws-ecs-deploy ${ECS_CLUSTER} ${ECS_SERVICE} $ECS_IMAGE:${REV}
      fi

      # Clean up old images
      docker run ${DOCKER_AWS_ENV} betteroutcomes/aws-ecs-deploy aws-ecr-clean ${ECR_REPO_NAME} 40

      # save cache of docker image to make subsequent runs faster
      docker tag $COMPOSE_IMAGE $ECS_IMAGE:$CACHE_TAG && docker push $ECS_IMAGE:$CACHE_TAG

    else
      echo "No deploy for branch [$BRANCH]"
    fi

notifications:
  slack: betteroutcomes:UHCKCWnX6yQbwFfcBRl2iYn7
